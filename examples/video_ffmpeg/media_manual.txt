Pyglet media player documentation

TOC
    Domain knowledge
    Current code architecture

Domain knowledge
================
This tutorial http://dranger.com/ffmpeg/ffmpeg.html is a good intro for building
some domain knowledge. Bear in mind that the tutorial is rather old, and
some ffmpeg functions have become deprecated - but the basics are still valid.


Current code architecture
=========================
The overview of the media code is the following:

Source
------
Found in media/sources folder.

Sources represent data containing media information. They can
come from disk or be created in memory. A Sources' responsibility is to read
data into and provide audio and/or video data out of its stream. Essentially, it's
a *producer*. One implementation of a `StreamingSource` is `FFmpegSource`.
It implements the `Source` base class by calling functions
found in media/sources/av.py which offer basic functionalities for
handling media streams, such as opening a file, reading stream info, reading
a packet, and decoding audio and video packets.

Player
------
Found in media/player.py

The player is the main object that drives the source. It maintains a queue of
sources that it can play sequentially. Its responsibilities are to play, pause,
and seek into the source.

If the source contains audio, the Player will instantiate an `AudioPlayer` by
asking the `SoundDriver` to create an appropriate `AudioPlayer` for the given platform. The
`AudioDriver` is a singleton created according to which drivers are available.
Currently supported sound drivers are: DirectSound, Pulse and AudioAL.

Finally, if the source contains video, the Player has a `texture` property
with the current video frame.

AudioPlayer
-----------
Found in media/drivers

The AudioPlayer is responsible only for the audio data. It can read, pause,
and seek into the `Source` - and can report the current audio time.

In order to accomplish these tasks, the audio player keeps a reference to the
`AudioDriver` singleton.

AudioDriver
-----------
Found in media/drivers

The AudioDriver is a wrapper around the low-level sound driver available
on the platform. It's a singleton. It can create an `AudioPlayer` appropriate
for the current `AudioDriver`.

It contains a `PlayerWorker` which is responsible for constantly filling up
all created `AudioPlayer` sound buffers using their `Source` data. It is
implemented using a Thread that iterates over each player and fills its
corresponding sound buffer. Just as the `AudioBuffer` is a singleton - so is this
`PlayerWorker`.
